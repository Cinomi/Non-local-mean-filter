function [result] = nonLocalMeans(image, sigma, h, patchSize, windowSize)

%REPLACE THIS

[rowNum, colNum, ~]=size(image);
dImg=double(image);

%pad image
windowR=floor(windowSize/2);
patchR=floor(patchSize/2);
extendSize=windowR+patchR;
extendImg=padarray(dImg,[extendSize,extendSize],'symmetric');

%find integral image of the difference
[counter, offsetsRows, offsetsCols, diff_ii]=getDiffIntegral(extendImg, windowSize);

for indexR=1:rowNum
    for indexC=1:colNum
        %get SSD matrix (windowSize x windowSize)
%         movedRow=indexR+extendSize;
%         movedCol=indexC+extendSize;
%         SSD=getSSDmatrix(movedRow,movedCol,diff_ii,patchSize);
%         weight=computeWeighting(SSD, h, sigma, patchSize);
%         window=extendImg(movedRow-windowR:movedRow+windowR,movedCol-windowR:movedCol+windowR,:);
%         window=reshape(window,[windowSize*windowSize,3]);
%         result(indexR,indexC,:)=sum(window.*weight);
        movedRow=indexR+extendSize;
        movedCol=indexC+extendSize;
        distances=zeros(counter,1);
        weight=zeros(counter,1);
        weightedPoint=0;
        for indexCounter=1:counter
            distances(indexCounter)=evaluateIntegralImage(diff_ii{counter},movedRow,movedCol,patchSize);
            weight(indexCounter)=computeWeighting(distances(indexCounter),h,sigma,patchSize);
            weightedPoint=weightedPoint+image(indexR+).*weight(indexCounter);
        end
        result(indexR,indexC,:)=weightedPoint;
    end
end

result=uint8(result);
end

%function to get difference integral image
function [counter,offsetsRows, offsetsCols,diff_ii]= getDiffIntegral(extendImg, windowSize)
    offsetsRows=zeros(windowSize*windwoSize,1);
    offsetsCols=zeros(windowSize*windowSize,2);
    diff_ii=cell(windowSize*windowSize,1);
    windowR=floor(windowSize/2);
    counter=0;
    for offsetCol=-windowR:windowR
        for offsetRow=-windowR:windowR
            counter=counter+1;   
            offsetsRows(counter)=offsetRow;
            offsetsCols(counter)=offsetCol;
            movedImg=imtranslate(extendImg,[-offsetCol,-offsetRow]);
            %diff=extendImg-movedImg;
            diff_ii{counter}=computeIntegralImage((extendImg-movedImg).^2);   %compute difference integral image
        end
    end
end

%function to get SSD of window
% function [SSD]=getSSDmatrix(movedRow, movedCol, diff_ii, patchSize)
%     [patchNum,~]=size(diff_ii);
%     SSD=zeros(patchNum,1);
%     counter=0;
%     for n=1:patchNum
%         counter=counter+1;
%         SSD(counter)=evaluateIntegralImage(diff_ii{counter},movedRow, movedCol, patchSize);
%     end
% end